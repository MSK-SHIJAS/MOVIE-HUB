
import React, { useState } from "react";
import './Login.css'
import 'bootstrap/dist/css/bootstrap.css';

function App1() {
  // State variables
  const [email, setEmail] = useState(""); // Store email input value
  const [password, setPassword] = useState(""); // Store password input value
  const [isVisible, setIsVisible] = useState(false); // Toggle visibility of user list table
  const [backupData, setBackupData] = useState([]); // Store backup of original user data
  const [search, setSearch] = useState(""); // Store search query
  const [form, setForm] = useState([]); 
  const [pname, setPname] = useState([]);// Store user data entered through the form

  // Function to handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();

    // Validation checks
    if (email === "") {
      return alert("Please enter an email address");
    }
    if (password === "") {
      return alert("Please enter a password");
    }
    if (password.length < 8) {
      return alert("Password must be at least 8 characters long");
    }
    if (password.length > 16) {
      return alert("Password cannot be more than 16 characters long");
    }

    // Add user data to form state array
    setIsVisible(true);
    setForm([...form, { email: email, password: password }]);
    setBackupData([...form, { email: email, password: password }]);

    // Clear input fields
    setEmail("");
    setPassword("");
  };

  // Function to handle deletion of a user
  const handleDeleteUser = (indexOf) => {
    const status = window.confirm("Delete?");

    if (status) {
      const result = form.filter((item, index) => index !== indexOf);
      setForm(result);
    }
  };

  // Function to handle search
  const handleSearch = (data) => {
    setSearch(data);

    // Filter user data based on search query
    if (data === "") {
      setForm(backupData);
    } else {
      const filteredItems = form.filter((user) =>
        user.email.toLowerCase().includes(data.toLowerCase())
      );
      setForm(filteredItems);
    }
  };

  // delete function
  // validation ( length, required )
  // search

  // toast
  // validation
  // modal
  // edit
  // localstorage
  // filter
  // sort
  // paginations

  return (
    <div className="A">
        <div>
      {/* Form */}
      <form className="form" onSubmit={handleSubmit}>
        <h1>Add</h1>
        <div className="form-div">
          <input
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="form-control"
            type="text"
            placeholder="Email"
          />
                    <input
            value={pname}
            onChange={(e) => setPname(e.target.value)}
            className="form-control"
            type="text"
            placeholder="Product name"
          />
        </div>
        <div className="form-div">
          <input
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="form-control mt-2"
            type="password"
            placeholder="Password"
          />
        </div>
        <div className="form-div">
          <input
            className="btn btn-primary mt-2"
            type="submit"
            placeholder="Submit"
          />
        </div>
      </form>

      {/* User list */}
      <div className="flex">
        {isVisible && (
          <div>
            {/* Search input */}
            <input
              type="search"
              className="form-control mt-2"
              placeholder="Search"
              value={search}
              onChange={(e) => handleSearch(e.target.value)}
            />
            {/* User table */}
            <div className="card mt-5">
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Email</th>
                </tr>
              </thead>
              <tbody>
                {form.map((item, index) => {
                  return (
                    <tr key={index}>
                      <td>{index}</td>
                      <td>{item.email}</td>
                      <td>{item.password}</td>
                      <td>{item.pname}</td>
                      <td>
                        <button className="btn btn-danger ms-3"onClick={() => handleDeleteUser(index)}>
                          Delete
                        </button>
                      </td>
                    </tr>
                 
                  );
                })}
              </tbody>
            </table>
            </div>
          </div>
        )}
      </div>
    </div>
    </div>
  );
}

export default App1;




import React, { useState } from "react";
import './Login.css'
import 'bootstrap/dist/css/bootstrap.css';

function App1() {
  // State variables
  const [pname, setPname] = useState(""); // Store product name input value
  const [color, setColor] = useState(""); // Store color input value
  const [rating, setRating] = useState(""); // Store rating input value
  const [price, setPrice] = useState(""); // Store price input value
  const [image, setImage] = useState(""); // Store image URL input value
  const [isVisible, setIsVisible] = useState(false); // Toggle visibility of user list cards
  const [backupData, setBackupData] = useState([]); // Store backup of original user data
  const [search, setSearch] = useState(""); // Store search query
  const [form, setForm] = useState([]); // Store user data entered through the form

  // Function to handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();

    // Validation checks
    if (pname === "") {
      return alert("Please enter a product name");
    }
    if (color === "") {
      return alert("Please enter a color");
    }
    if (rating === "") {
      return alert("Please enter a rating");
    }
    if (price === "") {
      return alert("Please enter a price");
    }
    if (image === "") {
      return alert("Please enter an image URL");
    }

    // Add user data to form state array
    setIsVisible(true);
    setForm([...form, { pname: pname, color: color, rating: rating, price: price, image: image }]);
    setBackupData([...form, { pname: pname, color: color, rating: rating, price: price, image: image }]);

    // Clear input fields
    setPname("");
    setColor("");
    setRating("");
    setPrice("");
    setImage("");
  };

  // Function to handle deletion of a user
  const handleDeleteUser = (indexOf) => {
    const status = window.confirm("Delete?");

    if (status) {
      const result = form.filter((item, index) => index !== indexOf);
      setForm(result);
    }
  };

  // Function to handle search
  const handleSearch = (data) => {
    setSearch(data);

    // Filter user data based on search query
    if (data === "") {
      setForm(backupData);
    } else {
      const filteredItems = form.filter((user) =>
        user.pname.toLowerCase().includes(data.toLowerCase())
      );
      setForm(filteredItems);
    }
  };

  return (
    <div className="A">
      <div>
        {/* Form */}
        <form className="form" onSubmit={handleSubmit}>
          <h1>Add</h1>
          <div className="form-div">
            <input
              value={pname}
              onChange={(e) => setPname(e.target.value)}
              className="form-control"
              type="text"
              placeholder="Product Name"
            />
          </div>
          <div className="form-div">
            <input
              value={color}
              onChange={(e) => setColor(e.target.value)}
              className="form-control mt-2"
              type="text"
              placeholder="Color"
            />
          </div>
          <div className="form-div">
            <input
              value={rating}
              onChange={(e) => setRating(e.target.value)}
              className="form-control mt-2"
              type="number"
              placeholder="Rating"
            />
          </div>
          <div className="form-div">
            <input
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              className="form-control mt-2"
              type="number"
              placeholder="Price"
            />
          </div>
          <div className="form-div">
            <input
              value={image}
              onChange={(e) => setImage(e.target.value)}
              className="form-control mt-2"
              type="text"
              placeholder="Image URL"
            />
          </div>
          <div className="form-div">
            <input
              className="btn btn-primary mt-2"
              type="submit"
              placeholder="Submit"
            />
          </div>
        </form>

        {/* User list */}
        <div className="flex">
          {isVisible && (
            <div>
              {/* Search input */}
              <input
                type="search"
                className="form-control mt-2"
                placeholder="Search"
                value={search}
                onChange={(e) => handleSearch(e.target.value)}
              />
              {/* User cards */}
              <div className="card mt-5">
                {form.map((item, index) => (
                  <div className="card-body" key={index}>
                    <h5 className="card-title">{item.pname}</h5>
                    <img src={item.image} alt={item.pname} className="img-fluid mb-3" />
                    <p className="card-text">Color: {item.color}</p>
                    <p className="card-text">Rating: {item.rating}</p>
                    <p className="card-text">Price: {item.price}</p>
                    <button className="btn btn-danger ms-3" onClick={() => handleDeleteUser(index)}>
                      Delete
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App1;
